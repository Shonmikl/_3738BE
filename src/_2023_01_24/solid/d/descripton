Принцип инверсии зависимостей (англ. Dependency Inversion Principle, DIP) — важный принцип объектно-ориентированного программирования, используемый для уменьшения связанности в компьютерных программах.
Входит в пятёрку принципов S.O.L.I.D.

Если ваш код использует внутри себя какой-то класс или явно обращается
к статическому методу какого-то класса или функции — это зависимость
Если класс "А" создает в внутри себя класс "В" или обращаятеся к статическим членам класса "В"
- это прямая зависимость

Прямые зависимости плохи тем, что класс, самостоятельно создающий внутри себя другой класс,
«намертво» привязывается к данному классу

Чтобы отвязать класс А от конкретных зависимостей применяется Инверсия Зависимостей
Инверсия зависимостей заключается в том, что,
класс не создает зависимости самостоятельно, а получает их в созданном виде в конструкторе (или иным образом).
Вместо того чтобы явно создавать нужный класс в коде, в класс А зависимости передаются через конструктор:

Формулировка:

Модули верхних уровней не должны зависеть от модулей нижних уровней.
Оба типа модулей должны зависеть от абстракций.
Абстракции не должны зависеть от деталей.
Детали должны зависеть от абстракций.


"+"
1) Keeps your code loosely coupled
2) Easier Maintenance
3) Better Code Reusability

"-"
Недостаток внедрения зависимостей виден тоже с первого взгляда — объекты классов,
спроектированных с использованием этого паттерна, трудоемко конструировать.
Поэтому обычно внедрение (инверсию) зависимостей применяют совместно с какой-либо библиотекой,
предназначенной для облегчения этой задачи

Dependency Inversion is more concentrated on the structure of your code. Moreover,
its focus is keeping your code loosely coupled.
On the other hand, Dependency Injection is about how the code functionally works.